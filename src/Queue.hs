module Queue where{-=== Tipo Coda ===-}data Queue a = Qu [a] deriving Show{-=== aggiunge un elemento alla coda ===-}enqueue :: Queue a -> a -> Queue aenqueue (Qu queue) elem = Qu ( queue ++ [elem] )enqueue (Qu []) elem = Qu [elem]{-=== rimuove il primo elemento della coda ===-}dequeue :: Queue a -> (a, Queue a)dequeue (Qu (x:xs)) = (x, (Qu xs))dequeue (Qu []) = error "coda vuota"{-=== crea una coda vuota ===-}emptyQueue :: Queue aemptyQueue = Qu []{-=== controlla se una coda e' vuota ===-}isEmpty :: Queue a -> BoolisEmpty (Qu []) = TrueisEmpty (Qu _) = False{-=== restituisce la lunghezza di una coda ===-}length :: Queue a -> Intlength (Qu (x:xs)) = 1 + Queue.length (Qu xs)length (Qu []) = 0